#!/usr/bin/env python3
# -*- coding: utf-8 -*- vim: et noet ci pi sts=0 sw=4 ts=4

from __future__ import print_function
import sys
sys.tracebacklimit = 0
import os, io, argparse, re
from xxhash import xxh64
from io import DEFAULT_BUFFER_SIZE as DEFAULT

APP = "xxh64sum"
CODE = 0
DEFAULT_LINE = DEFAULT * 8


def xxh64_calc(FILENAME):
	hashsum = xxh64()
	with open(FILENAME, 'rb') as openfile:
		while True:
			DATA = openfile.read(DEFAULT)
			if not DATA:
				break
			hashsum.update(DATA)

		XXH64_HASH = hashsum.hexdigest()
		return XXH64_HASH

def xxh64_make(FILENAME):
	XXH64_HASH = xxh64_calc(FILEPATH)
	if args.tag == True:
		print( "XXH64 (" + ARGNAME + ") =", XXH64_HASH, flush=True); sys.stdout.flush()
	else:
		print(XXH64_HASH + '  ' + ARGNAME, flush=True); sys.stdout.flush()

def xxh64_check_type(DATA):
	if re.match('^[0-9a-fA-F]{16} [ \*\^U]..*$', DATA):
		EMPTY, HASH, FILE = re.split("^([0-9a-fA-F]{16}) [ \*\^U]", DATA, maxsplit=1)
		FILE = FILE[:-1]
		HASH = HASH.lower()
		return True, HASH, FILE
	elif re.match('^XXH64 \(..*\) = [0-9a-fA-F]{16}$', DATA):
		DATA = (DATA[7:])
		FILE, HASH, EMPTY = re.split('\) = ([0-9a-fA-F]{16})$', DATA, maxsplit=1)
		HASH = HASH.lower()
		return True, HASH, FILE
	elif re.match('^[0-9a-fA-F]{16} ..*$', DATA):
		EMPTY, HASH, FILE = re.split("^([0-9a-fA-F]{16}) ", DATA, maxsplit=1)
		FILE = FILE[:-1]
		HASH = HASH.lower()
		return True, HASH, FILE
	else:
		HASH = ""
		FILE = ""
		return False, HASH, FILE


def xxh64_check_act(OLD, ARG):
	if os.path.isdir(ARG):
		print(APP + ":", ARG + ": Is a directory", file=sys.stderr)
		print (ARG + ": FAILED open or read", flush=True); sys.stdout.flush()
		return False, False, True
	elif os.path.exists(ARG):
		try:
			with open(ARG) as F:
				FILEPATH = ARG
		except IOError:
			print(APP + ":", ARG + ": Permission denied", file=sys.stderr)
			print (ARG + ": FAILED open or read", flush=True); sys.stdout.flush()
			return False, False, True
		NEW = xxh64_calc(FILEPATH)
		if NEW == OLD:
			print(ARG + ": OK", flush=True); sys.stdout.flush()
			return True, True, True
		else:
			print(ARG + ": FAILED", flush=True); sys.stdout.flush()
			return False, True, False

	else:
		if args.ignore_missing == True:
			return True, True, True
		else:
			print (APP + ":", ARG + ": No such file or directory", file=sys.stderr)
			print (ARG + ": FAILED open or read", flush=True); sys.stdout.flush()
			return False, False, True

def xxh64_check(FILENAME, NAME):
	FUNCCODE = 0
	WARN = 0
	WARN_FILE = 0
	WARN_CHECK = 0
	try:
		with open(FILENAME, 'r') as openfile:
			while True:
				try:
					DATA = openfile.readline(DEFAULT_LINE)
					if not DATA:
						break

					SUM, HASH, FILE = xxh64_check_type(DATA)
					if SUM == True:
						ALL, WARNOPEN, WARNFAIL = xxh64_check_act(HASH, FILE)

						if WARNOPEN == False:
							WARN_FILE = WARN_FILE + 1
						if WARNFAIL == False:
							WARN_CHECK = WARN_CHECK + 1

						if ALL == True:
							continue
						else:
							FUNCCODE = 1
							continue
					else:
						WARN = WARN + 1
						continue

				except IndexError:
					continue

		if WARN > 1:
			print(APP + ": WARNING: " + str(WARN) + " lines are improperly formatted", file=sys.stderr)
		elif WARN == 1:
			print(APP + ": WARNING: 1 line is improperly formatted", file=sys.stderr)
		if WARN_FILE > 1:
			print(APP + ": WARNING: " + str(WARN_FILE) + " listed files could not be read", file=sys.stderr)
		elif WARN_FILE == 1:
			print(APP + ": WARNING: 1 listed file could not be read", file=sys.stderr)
		if WARN_CHECK > 1:
			print(APP + ": WARNING: " + str(WARN_CHECK) + " computed checksums did NOT match", file=sys.stderr)
		elif WARN_CHECK == 1:
			print(APP + ": WARNING: 1 computed checksum did NOT match", file=sys.stderr)

		if FUNCCODE == 0:
			return True
		else:
			return False

	except UnicodeDecodeError:
		return False

if __name__ == '__main__':
	try:
		parser = argparse.ArgumentParser(
				description='Print or check XXH64 checksums.')
		group_one = parser.add_mutually_exclusive_group()
		group_two = parser.add_mutually_exclusive_group()
		group_one.add_argument('-c', '--check', help='read XXH64 sums from the FILEs and check them', action="store_true", default=False)
		group_one.add_argument('--tag', help="create a BSD-style checksum", action="store_true", default=False)
		group_two.add_argument('--ignore-missing', help="don't fail or report status for missing files", action="store_true", default=False)

		parser.add_argument('FILE', action='store', nargs='*')
		args = parser.parse_args()

		STDIN = False
		if len(args.FILE) == 0:
			args.FILE = ['/dev/stdin']
			STDIN = True

		for ARG in args.FILE:
			if STDIN == True:
				ARGNAME = "-"
			else:
				ARGNAME = ARG
			if os.path.isdir(ARG):
				print(APP + ":", ARGNAME + ": Is a directory", file=sys.stderr)
				CODE = 1
			elif os.path.exists(ARG):
				try:
					with open(ARG) as F:
						FILEPATH = ARG
				except IOError:
					print(APP + ":", ARGNAME + ": Permission denied", file=sys.stderr)
					CODE = 1
					continue
				if args.check == False:
					xxh64_make(FILEPATH)
				else:
					if not xxh64_check(FILEPATH, ARG):
						CODE = 1
			else:
				print (APP + ":", ARGNAME + ": No such file or directory", file=sys.stderr)
				CODE = 1

	except KeyboardInterrupt:
		sys.stderr.close()
		print ('')
		sys.stdout.close()
		sys.exit(130)

	except BrokenPipeError:
		sys.stderr.close()
		sys.stdout.close()
		sys.exit(1)

sys.exit(CODE)
